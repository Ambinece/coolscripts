local UIS = game:GetService("UserInputService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local CoreGui = game:GetService("CoreGui")
local Screen = Instance.new("ScreenGui")
local Gui = Instance.new("Frame")
local Player = game.Players.LocalPlayer
local Character = Player.Character or Player.CharacterAdded:Wait()
local Humanoid = Character:WaitForChild("Humanoid")

Screen.Parent = CoreGui

Gui.Parent = Screen
Gui.Size = UDim2.new(0, 50, 0, 100)
Gui.BackgroundColor3 = Color3.new(255/255, 204/255, 204/255)
Gui.Position = UDim2.new(0.5, -150, 0.5, -100)

local isSpamming = false
local spamCoroutine

local function spamRob()
    while isSpamming do
        local robRemote = ReplicatedStorage:WaitForChild("rob")
        if robRemote then
            robRemote:FireServer()
        end
        task.wait(0.1) -- Adjust the delay as needed
    end
end

local function toggleSpam()
    isSpamming = not isSpamming
    if isSpamming then
        Gui.BackgroundColor3 = Color3.new(204/255, 255/255, 204/255)
        spamCoroutine = coroutine.create(spamRob)
        coroutine.resume(spamCoroutine)
    else
        Gui.BackgroundColor3 = Color3.new(255/255, 204/255, 204/255)
        spamCoroutine = nil -- Set to nil to indicate coroutine is stopped
    end
end

-- Function to continuously check the RobTransformed status
local function checkRobTransformed()
    while true do
        if Character:FindFirstChild("RobTransformed") then
            Humanoid.WalkSpeed = 23
        else
            Humanoid.WalkSpeed = 16 -- Reset to default WalkSpeed if needed
        end
        task.wait(0.5)
    end
end

-- Start the RobTransformed check coroutine
coroutine.wrap(checkRobTransformed)()

-- Bind the "R" key to toggle the spam function
UIS.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.R then
        toggleSpam()
    end
end)
